/*                                 crash's After Effects Karaoke Script
 **********************************************************************************************
 *                     DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE 
 *                                       Version 2, December 2004 
 *
 * Copyright (C) 2004 Sam Hocevar <sam@hocevar.net> 
 *
 * Everyone is permitted to copy and distribute verbatim or modified 
 * copies of this license document, and changing it is allowed as long 
 * as the name is changed. 
 *
 *                	DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE 
 *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 
 *
 *	0. You just DO WHAT THE FUCK YOU WANT TO. 
 **********************************************************************************************
 *	This program is free software. It comes without any warranty, to
 *	the extent permitted by applicable law. You can redistribute it
 *	and/or modify it under the terms of the Do What The Fuck You Want
 *	To Public License, Version 2, as published by Sam Hocevar. See
 *	http://sam.zoy.org/wtfpl/COPYING for more details.
 **********************************************************************************************
 *	
 */


{
//=================================================================================================================//
//=================================================== MAIN METHOD =================================================//

	// Start of undo group
	app.beginUndoGroup( "Generate Karaoke" );
	
	//======================== GUI VARIABLES ==========================//
	//array of the names of comps in the project
	var compList = getCompNames();
	//2 dimentional array with all the template layers in it
	var templateLayerList = getAllTemplateLayers();
	//================================================================//
	
	var compSelectWindow = buildCompSelectionUI();
	if (compSelectWindow != null)
			compSelectWindow.show();

	
	// End of undo group
	app.endUndoGroup();

//============================================== MAIN METHOD END ==================================================//
//=================================================================================================================//

//=================================================================================================================//
//=========================================== GUI VARIABLE FUNCTIONS ===============================================//
	//grab all the comp names from the project
	function getCompNames()
	{
		var compListLocal = [];
		//x is a counter variable for saving the comp names to the array
		var x = 0;
		
		//get the amount of items in the project
		var itemCount = app.project.items.length;
		for(var i=1 ; i <= itemCount ; i++){
			var comp = app.project.item(i)
			//if the item is a Composition
			if(comp.typeName == "Composition"){
				compListLocal[x] = comp.name;
				x++;
			}
		}
		return compListLocal;
	}
	//grab all the layers what have both [ and ] markers in all comps
	function getAllTemplateLayers()
	{
		var templateListGroup = [];
		var templateList = [];
		//x and y are counter vaiables for saving the layer name in the array
		var x = 0;
		var y = 0;
		
		//get the amount of items in the project
		var itemCount = app.project.items.length;
		for(var i=1 ; i <= itemCount ; i++){
			//set comp = to an item in the project
			var comp = app.project.item(i)
			//if the item is a Composition
			if(comp.typeName == "Composition"){
				//using an expression is the only way to get info on markers applied to a comp -____- (i know right)
				var compMarkerTextLayer = comp.layers.addText("");
				compMarkerTextLayer.Text.sourceText.expression = "var m=thisComp.marker;var x='';for(var i=1;i<=m.numKeys;i++){x+=(m.key(i).comment);}x" ;
				var markerComments = String(compMarkerTextLayer.Text.sourceText.value);
				compMarkerTextLayer.remove();
				var m1 = false;
				var m2 = false;
				var j = 0
				for( ; j < markerComments.length && !m1; j++){
					if(markerComments.charAt(j) == "[")
						m1 = true
				}
				for( ; j < markerComments.length && !m2; j++){
					if(markerComments.charAt(j) == "]")
						m2 = true
				}
				//if the markers are set on the comp then all layers not generated by the script are template layers
				if(m1 && m2){
					x = 0;
					templateListGroup = [];
					for(var n = 1 ; n <= comp.numLayers ; n++){
						templateListGroup[x] = comp.layer(n).name;
						x++;
					}
				//if no markers are on the comp then look though all layers individually
				}else{
					x = 0;
					templateListGroup = [];
					for(var j = 1 ; j <=  comp.numLayers ; j++){
						var marker = comp.layer(j).property("Marker");
						//if the layer has 2 markers with [ and ] in the respective comments then it is a template layer
						if(marker.numKeys >= 2){
							var m = 1;
							var marker1 = false;
							var marker2 = false;
							//look for a marker with "[" in it
							for( ; m <= marker.numKeys && !marker1  ; m++){
								if(marker.keyValue(m).comment == "[")
									marker1 = true;
							}
							//if the marker with "[" is found then look for one with "]"
							for( ; m <= marker.numKeys && !marker2 ; m++){
								if(marker.keyValue(m).comment == "]")
									marker2 = true;
							}
							//if both "[" and "]" markers are found then it is a template layer
							if(marker1 && marker2){
								templateListGroup[x] = comp.layer(j).name;
								x++;
							}
						}
					}
				}
				templateList[y] = templateListGroup;
				y++;
			}
		}
		return templateList;
	}
//========================================= GUI VARIABLE FUNCTIONS END =============================================//
//=================================================================================================================//

//=================================================================================================================//
//==================================================== GUI =========================================================//
	//builds the first ui that is shown when the script is run
	function buildCompSelectionUI()
	{
		var win = new Window("palette", "crash's Karaoke Generator!", [50,50,500,600]);
		if(win != null){
			
			//comp selection pulldown
			win.compSelectionPnl = win.add("panel", [10,10, win.bounds.width-10, 60],"Choose Composition");
			win.compSelectionPnl.compSelectionDropDown = win.compSelectionPnl.add("dropdownlist",[10, 10, win.compSelectionPnl.bounds.width-15, 30], compList);
			win.compSelectionPnl.compSelectionDropDown.onChange = onCompSelection;
			
			//template layer and info section
			win.templateSelectionPnl = win.add("panel", [10, win.compSelectionPnl.bounds.bottom+10, win.bounds.width-10, win.bounds.height-10],"Choose Template Layer");
			//create an array of dropdowns, one for each comp then hide them all except the default
			win.templateSelectionPnl.templateSelectionDropDown = []
			var i = 0
			for( ; i < compList.length ; i++){
				win.templateSelectionPnl.templateSelectionDropDown[i] = win.templateSelectionPnl.add("dropdownlist",[10, 10, win.templateSelectionPnl.bounds.width-15, 30], templateLayerList[i]);
				win.templateSelectionPnl.templateSelectionDropDown[i].visible = false;
			}
			//default empty dropdown
			win.templateSelectionPnl.templateSelectionDropDown[i] = win.templateSelectionPnl.add("dropdownlist",[10, 10, win.templateSelectionPnl.bounds.width-15, 30], []);
			
		}
		return win
	}
	
	function onCompSelection()
	{
		//this.selection.index is the index of the current dropdowns selection
		var dropDowns = compSelectWindow.templateSelectionPnl.templateSelectionDropDown;
		//make all dropdowns invisible
		for(var i = 0 ; i < dropDowns.length ; i++){
			dropDowns[i].visible = false;
		}
		dropDowns[this.selection.index].visible = true;
	}
	
	
	//when the Open .ass file button is pressed this function executes
	function onOpenFilePress()
	{
		// Prompt user to select text file
		var assFile = File.openDialog( "Please select timed .ass file." );
		if (assFile != null){
	
			// open file
			if (assFile.open("r")){
	
				var line;
				var karaokeLine = new KaraokeLine();
				
				while(!assFile.eof){
					line = assFile.readln();
					// call getAssLine() to grab a line of karaoke
					if ( karaokeLine = parseAssLine( line ) ){
						// GET UI INFO HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
						//alert( karaokeString );
						// make karaoke line
						makeKaraokeLine( karaokeLine, /*templateLayer*/ );
					}
					// clear "karaokeLine"
					karaokeLine = new KaraokeLine();
				}
			
				// close the file before exiting
				assFile.close();
	
			}else{
				alert("Timed .ass file failed to open!");
			}
	
		}else{
			alert("No timed .ass file selected.");
		}
	}
//================================================== GUI  END ======================================================//
//=================================================================================================================//

//=================================================================================================================//
//================================================ XML INTERPRET ==================================================//
/*	function interpretXML()
	{
		//comps is an array of Comp objects
		var comps = [];
		var xmlText;
		for(var i = 0 ; i < app.project.items.length && xmlText == null ; i++){
			if(app.project.item(i).name.search(/^[0-9]{12}$/) != -1)
				xmlText = String(app.project.item(i).layer(2).Text.sourceText.value);
		}
		//xml is ALL of the xml code
		var xml = new XML(xmlText);
		//loop through the comps
		for(var i = 0 ; i < xml.elements().length() ; i++){
			var comp = new Comp();
			//loop though the layers in the comps
			for(var j = 0 ; j < xml.comp[i].elements().length() ; j++){
				//loop through the settings of the layers
				for(var k = 0 ; k < xml.comp[i].child(j).length() ; k++){
					xml.comp.child(j).name;
				}
			}
		}
		return comps;
	}*/
//============================================== XML INTERPRET END ================================================//
//=================================================================================================================//

//=================================================================================================================//
//============================================ GENERATION FUNCTIONS ===============================================//
	// Grabs lines from the timed .ass file then grabs the line timing, karaoke timing, and karaoke contents
	// Then it returns the karaoke line in the form of an array.
	function parseAssLine( line ) 
	{
		// make a new KaraokeLine object so that parseAss can get the info
		var karaokeLine = new KaraokeLine();
		// read text lines and look for Dialogue layers
		
		if( line.match( /^Dialog/ ) ){
		// lineDelimited is now the karaoke split at the ,'s
			var lineDelimited = line.split( /,/ );
		
			// check for empty dialog line, if empty return false and stop the function
			if( lineDelimited.length < 9 )
				return false;
				
			// get the style, 3 is the index for the style
			karaokeLine.style = lineDelimited[3];
			
			// get line timings
			// rewite this so it will actually save the timeings as integers and not delimited strigns.
			// 0:00:04.17
			var startLineTimingString = lineDelimited[1];
			var endLineTimingString = lineDelimited[2];
			// split the group from 0:00:04.17 to {0 , 00 , 04.17}
			var startLineTimingStringDelimited = startLineTimingString.split( /:/ );
			var endLineTimingStringDelimited = endLineTimingString.split( /:/ );
			// grab all the number from the strings
			var startLineTimingFloat = 0;
			startLineTimingFloat += parseFloat(startLineTimingStringDelimited[2]);
			startLineTimingFloat += parseInt(startLineTimingStringDelimited[1])*60;
			startLineTimingFloat += parseInt(startLineTimingStringDelimited[0])*60*60;
			var endLineTimingFloat = 0;
			endLineTimingFloat += parseFloat(endLineTimingStringDelimited[2]);
			endLineTimingFloat += parseInt(endLineTimingStringDelimited[1])*60;
			endLineTimingFloat += parseInt(endLineTimingStringDelimited[0])*60*60;
			//save the start and end times
			karaokeLine.lineStart = startLineTimingFloat;
			karaokeLine.lineEnd   = endLineTimingFloat;
			
			//get syl timing for karaoke line
			
			
			
			if(lineDelimited.length > 10){
				//the karaoke line has atleast one ',' somewhere in it so concat the last few chuncks
				for(var i = 10 ; i < lineDelimited.length ; i++){
						lineDelimited[9] = lineDelimited[9].concat("," +lineDelimited[i]);
					}
			}
			alert(lineDelimited[9]);
			// separate the karaoke text into parts
			//Karaoke string is at array index 9
			var karaokeDelimited = lineDelimited[9].split( /\{\\(K|kf?)([0-9]+)\}(.*?)/ );
			alert(karaokeDelimited);
			//karaokeDelimited now looks like { ,{k\29} , k , 29 , strange,  , {k\37} , k , 37 , strange  , {k\27} , k , 27 , cow , {\k44} , k , 44 , boy!}
			// loop though the parts of karaoke text, grab the timings and put them in an array
			// syllable timings start at index 3
			for( var i = 3 ; i < karaokeDelimited.length ; i+=4 )
				karaokeLine.sylTimes = karaokeLine.sylTimes.concat( parseFloat(karaokeDelimited[i]) );
			
			// loop though the parts of karaoke text, grab the text and put it in an array
			// syllable contents start at index 4
			for( var i = 4 ; i < karaokeDelimited.length ; i+=4 )
				karaokeLine.karaText = karaokeLine.karaText.concat( karaokeDelimited[i] );
	
			// return complete karaokeLine
			var karaokeLine = [ style , lineTimingArray , sylTimingArray , karaokeTextArray ];
			return karaokeLine;
		}
		return null;
	}
	
	// Using the timing array from getAssLine() and the karaoke text from getKaraokeText()
	// This function duplicates the coresponding template layer and conforms it accordning to timing and karaoke text.
	function makeKaraokeLine( karaokeLine , karaokeString , /*templateLayer*/ )
	{
		var testComp = app.project.item( 1 ).layers
		testComp.addText( karaokeString );
	}
//========================================= GENERATION FUNCTIONS END ==============================================//
//=================================================================================================================//	

//=================================================================================================================//
//============================================ KARAOKE LINE OBJECT =================================================//
	function KaraokeLine()
	{
		this.style = "";
		this.lineStart = 0;
		this.lineEnd = 0;
		this.sylTimes = [];
		this.karaText = [];
		this.karaTextLength = [];
		this.karaTextLengthNoSpace = [];
		this.karaString = "";
		this.sylPositions = [];
	}

//===============================================================================================================//
//=============================================== CONFIG OBJECTS =================================================//
	/*
	 *<composition name="name">
	 *	<layer name="name">
	 *		<style name="name" sylperlayer="true"/>
	 *		<animator name="name" syl="true" sylanchor="true" fixed="true" fixedanchor="0-100">
	 *			<rangeselector name="name" syl="true"/>
	 *			<overlap use="true" ammount="0-100"/>
	 *		</animator>
	 *		<property name="name" syl="true" syleffect="true" fixed="true" fixedanchor="0-100">
	 *			<overlap use="true" ammount="0-100"/>
	 *		</property>
	 *		<pos use="true" name="point control" posfrom="layer name"/>
	 *		<dim use="true" hsylname="slider name" wsylname="slider name" hlinename="slider name" wlinename="slider name"/>
	 *		<moveto use="true" name="comp name" newcomp="true"/>
	 *		<time use="true" linelength="slider name" syllength="slider name"/>
	 *		<mask use="true" stroke="true" animfrom="slider name"/>
	 *		<index use="true" sylstart="slider name" sylend="slider name" linetotal="slider name"/>
	 *	</layer>
	 *< /composition>
	 */
	//the following code is built to replicate the heierachy of the above XML standard that with GUI uses to communitace with the script.
	function Comp()
	{
		this.name;
		this.layer = new Layer();
	}
	function Layer()
	{
		this.name;
		this.style = new Style();
		this.animator = [];
		this.property = [];
		this.pos = new Pos();
		this.dim = new Dim();
		this.moveto = new MoveTo();
		this.time = new Time();
		this.mask = new Mask();
		this.index = new Index();
	}
	function Style()
	{
		this.name;
		this.sylperlayer;
	}
	function Animator()
	{
		this.name;
		this.syl;
		this.sylanchor;
		this.fixed;
		this.fixedanchor;
		this.rangeselectors = [];
		this.overlap = new Overlap();
	}
	function Property()
	{
		this.name;
		this.syl;
		this.syleffect;
		this.fixed;
		this.fixedanchor;
		this.overlap = new Overlap();
	}
	function Pos()
	{
		this.use;
		this.name;
		this.posfrom;
	}
	function Dim()
	{
		this.use;
		this.hsylname;
		this.wsylname;
		this.hlinename;
		this.wlinename;
	}
	function MoveTo()
	{
		this.use;
		this.name;
		this.newcomp;
	}
	function Time()
	{
		this.use;
		this.linelength;
		this.syllength;
	}
	function Mask()
	{
		this.use;
		this.stroke;
		this.animfrom;
	}
	function Index()
	{
		this.use;
		this.sylstart;
		this.sylend;
		this.linetotal;
	}
	function RangeSelector()
	{
		this.name;
		this.syl;
	}
	function Overlap()
	{
		this.use;
		this.ammount;
	}



}